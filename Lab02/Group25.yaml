AWSTemplateFormatVersion: '2010-09-09'
#Public DNS: ec2-54-153-239-209.ap-southeast-2.compute.amazonaws.com
#Public IP: 54.153.239.209
#Private IP: 10.0.2.173
#.pem for SSH connect
Description: VPC with Public and Private Subnet, Internet Gateway, NAT Gateway, Security Groups, and EC2 instances.

Parameters: 
  VpcCIDR:
    Type: String
    Default: 10.0.0.0/16
    Description: Enter VPC CIDR
 
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access
    Type: AWS::EC2::KeyPair::KeyName
    Default: Group25

  PublicSubnetCIDR:
    Type: String
    Default: 10.0.1.0/24
    Description: Enter CIDR for Public Subnet
  
  PrivateSubnetCIDR:
    Type: String
    Default: 10.0.2.0/24
    Description: Enter CIDR for Private Subnet


Resources: 
  myVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags: 
        - Key: Name
          Value: Group25

  
  myInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: myInternetGateway

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref myVPC
      InternetGatewayId: !Ref myInternetGateway

  
  myPublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref myVPC
      CidrBlock: !Ref PublicSubnetCIDR
      AvailabilityZone: "us-east-1a"
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: myPublicSubnet

  
  myPrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref myVPC
      CidrBlock: !Ref PrivateSubnetCIDR
      AvailabilityZone: "us-east-1a"
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: myPrivateSubnet

 
  myPublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref myVPC
      Tags:
        - Key: Name
          Value: myPublicRouteTable

 
  myPublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref myPublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref myInternetGateway

 
  myPublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref myPublicSubnet
      RouteTableId: !Ref myPublicRouteTable

  
  myPrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref myVPC
      Tags:
        - Key: Name
          Value: myPrivateRouteTable

  
  myElasticIP:
    Type: AWS::EC2::EIP

  myNATGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      SubnetId: !Ref myPublicSubnet
      AllocationId: !GetAtt myElasticIP.AllocationId
      Tags:
        - Key: Name
          Value: myNATGateway

  
  myPrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref myPrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref myNATGateway

  
  myPrivateSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref myPrivateSubnet
      RouteTableId: !Ref myPrivateRouteTable

  
  PublicInstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref myVPC
      GroupDescription: Allow SSH and HTTP traffic
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0  
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0 
 
  PrivateInstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref myVPC
      GroupDescription: Allow SSH from Public EC2
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          SourceSecurityGroupId: !Ref PublicInstanceSecurityGroup 

 
  PublicEC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      KeyName: !Ref KeyName
      SubnetId: !Ref myPublicSubnet
      SecurityGroupIds:
        - !Ref PublicInstanceSecurityGroup
      ImageId: ami-0166fe664262f664c 

 
  PrivateEC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      KeyName: !Ref KeyName
      SubnetId: !Ref myPrivateSubnet
      SecurityGroupIds:
        - !Ref PrivateInstanceSecurityGroup
      ImageId: ami-0166fe664262f664c 

Outputs:
  PublicEC2Instance:
    Description: "Public EC2 Instance ID"
    Value: !Ref PublicEC2Instance

  PrivateEC2Instance:
    Description: "Private EC2 Instance ID"
    Value: !Ref PrivateEC2Instance
